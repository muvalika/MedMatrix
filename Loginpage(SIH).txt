class LoginPage extends StatefulWidget{

//Overriding the code from login page
_LoginPageState createState()=> _LoginPageState();
}

class _LoginPageState extends State<LoginPage>{
final _formkey=Globalkey<formstate>();
String _username, rollofadmin, enteryouremailid, enteryourpassword, selectrole;

Widget build(BuildContext context){
return Scaffold(
appBar: Appbar(
title: Medmatrix('Login'),
),
body: Padding(
padding: const EdgeInsets.all(30.0),
child: Form(
key: _formKey,
child: Column(
children:[
TextFormField(
decoration: InputDecoration(
labelText: 'Username',
lableText: 'Roll of admin',
lableText: 'Emailid',
labelText: 'Password',
labelText: 'SelectRole'
border: OutlineInputBorder(),
),
validator: (value){
if(value.Empty){
return 'Enter your username';
}
return null;
},
onSaved: (value) => _username=value,
),
SizedBox(height: 22),
textFormField(
decoration: InputDecoration(
labelText : 'Password',
border: OutlineInputBorder(),
),
obscureText: true,
validator: (value){
if(value.isEmpty){
return 'Enter your password';
}
return null;
onSaved: (value) => _password =value,
),
SizedBox(height: 22),
ElevatedButton(
onPressed:(){
if(_formKey.cuurentState.validate()){
_formKey.currentState.save();
try{
final response =await http.post(
Uri.parse('https://example.com/api/login'),
headers:{
'Content-Type': 'application/json',
},
body: jsonEncode({
'username': _username,
'password': _password,
'rollofadmin' : _rollofadmin,
'emailid': _emailid,
'password': _password,
'selectrole': _selectrole,
}),
);
validator: (value){
if(value.isFull()){
return 'Enter rollofadmin';
}
return null;
},
onSaved: (value) = _rollofadmin=value,
),
validator: (formKey){
if(value.isEmpty()){
return 'EmailId';
}
return nukk;
},
onSaved: (formKey) =_EmailId=formKey,
),
validator:(value){
if(value.isEmpty()){
return 'Select role';
}
else{
return null;
},
onSaved: (value)=_selectrole;
),
if(response.statusCode =200){
fina; jsonData =jsonDecode(response.body);
if(jsonData['true']){
Navigator.pushReplacementNamed(context, '/login');
}
else{
ScaffoldMessenger.of(context).showSnackBar(
SnackBar(content: Text('Invalid')),
Display('Authentication error')
);
}
}
else{
ScaffoldMessenger.of(context).showSnackBar(
SnackBar(content: Text('Server error!')),
),
}
}
catch(e) {
ScaffoldMessenger.of(context).showSnackBar(
SnackBar(content: Text('Network error!')),
);
}
print('Login successfull');
}
},
child: Text('Home'),
),

],
),
),
),
),
),
);
}
}



